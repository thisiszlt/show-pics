{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["picData","Array","from","map","val","index","picture","winHeight","window","innerHeight","winWidth","innerWidth","App","props","showModal","key","e","preventDefault","console","log","setState","onClose","onWrapTouchStart","test","navigator","userAgent","el","selector","matchesSelector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","call","parentElement","closest","target","state","pic0","pic1","pic2","pic3","PicDetail","pic","visible","transparent","closable","popup","wrapProps","onTouchStart","style","position","display","alignItems","height","overflow","margin","src","alt","flex","width","objectFit","transform","bottom","left","data","columnNum","square","hasLine","renderItem","dataItem","padding","onClick","itemStyle","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iNAIMA,G,OAAUC,MAAMC,KAAK,IAAID,MAAM,IAAIE,KAAI,SAACC,EAAKC,GAAN,MAAiB,CAC5DC,QAASD,EAAQ,YAEbE,EAAUC,OAAOC,YACjBC,EAAWF,OAAOG,W,IA8FTC,E,kDAhFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,UAAY,SAAAC,GAAG,OAAI,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAIJ,GACZ,EAAKK,SAAL,eACGL,GAAM,MAdQ,EAkBnBM,QAAU,SAAAN,GAAG,OAAI,WACf,EAAKK,SAAL,eACGL,GAAM,MApBQ,EAuBnBO,iBAAmB,SAACN,GAEb,oBAAoBO,KAAKC,UAAUC,aArC5C,SAAiBC,EAAIC,GAEnB,IADA,IAAMC,EAAkBF,EAAGG,SAAWH,EAAGI,uBAAyBJ,EAAGK,oBAAsBL,EAAGM,kBACvFN,GAAI,CACT,GAAIE,EAAgBK,KAAKP,EAAIC,GAC3B,OAAOD,EAETA,EAAKA,EAAGQ,cAEV,OAAO,KAgCSC,CAAQnB,EAAEoB,OAAQ,sBAE9BpB,EAAEC,mBA5BJ,EAAKoB,MAAQ,CACXC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,MAAM,GANS,E,qDAkCV,IAAD,OACAC,EAAYzC,MAAMC,KAAK,IAAID,MAAM,IAAIE,KAAI,SAACC,EAAKC,GACnD,IAAIsC,EAAG,aAAStC,GAChB,OACA,kBAAC,IAAD,CACEuC,QAAS,EAAKP,MAAMM,GACpBE,aAAW,EACXxB,QAAS,EAAKA,QAAQsB,GACtBG,UAAU,EACVC,OAAK,EACLC,UAAW,CAAEC,aAAc,EAAK3B,kBAChCP,IAAK4B,GAEL,yBAAKO,MAAO,CAAEC,SAAS,WAAWC,QAAQ,OAAOC,WAAW,SAASC,OAAQ/C,EAAWgD,SAAU,SAASC,OAAO,WAChH,yBAAKC,IAAG,UAAKpD,EAAL,QAAkBqD,IAAI,GAAGR,MAAO,CAACS,KAAK,OAAOC,MAAMlD,EAAS,GAAGmD,UAAU,gBAKvF,OACE,yBAAKX,MAAO,CAACC,SAAU,WAAWW,UAAW,sBAAsBC,OAAQ,MAAMC,KAAK,QACpF,kBAAC,IAAD,CAAMC,KAAMjE,EACZkE,UAAW,EACXC,QAAQ,EACRC,SAAS,EACTC,WAAY,SAACC,EAAUjE,GAAX,OACV,yBAAK6C,MAAO,CAAEqB,QAAS,GAAKC,QAAS,EAAK1D,UAAL,aAAqBT,KACxD,yBAAKoD,IAAKa,EAAShE,QAAS4C,MAAO,CAACI,OAAO/C,EAAU,EAAI,KAAOmD,IAAI,OAGxEe,UAAW,CAACF,QAAQ,KAOnB7B,O,GAxESgC,IAAMC,WCTJC,QACW,cAA7BpE,OAAOqE,SAASC,UAEe,UAA7BtE,OAAOqE,SAASC,UAEhBtE,OAAOqE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB5D,WACrBA,UAAU6D,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzE,QAAQyE,MAAMA,EAAMC,a","file":"static/js/main.5e974c20.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Modal} from \"antd-mobile\";\nimport 'antd-mobile/dist/antd-mobile.css';\n\nconst picData = Array.from(new Array(4)).map((val, index) => ({\n  picture: index + \".PNG\"\n}));\nconst winHeight=window.innerHeight;\nconst winWidth = window.innerWidth;\n\nfunction closest(el, selector) {\n  const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n  while (el) {\n    if (matchesSelector.call(el, selector)) {\n      return el;\n    }\n    el = el.parentElement;\n  }\n  return null;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pic0: false,\n      pic1: false,\n      pic2: false,\n      pic3: false\n    };\n  }\n\n  showModal = key => (e) => {\n    e.preventDefault(); // 修复 Android 上点击穿透\n    console.log(key);\n    this.setState({\n      [key]: true,\n    });\n  }\n\n  onClose = key => () => {\n    this.setState({\n      [key]: false,\n    });\n  }\n  onWrapTouchStart = (e) => {\n    // fix touch to scroll background page on iOS\n    if (!/iPhone|iPod|iPad/i.test(navigator.userAgent)) {\n      return;\n    }\n    const pNode = closest(e.target, '.am-modal-content');\n    if (!pNode) {\n      e.preventDefault();\n    }\n  }\n\n  render(){\n    const PicDetail = Array.from(new Array(4)).map((val, index) => {\n      var pic = `pic${index}`;\n      return (\n      <Modal\n        visible={this.state[pic]}\n        transparent\n        onClose={this.onClose(pic)}\n        closable={true}\n        popup\n        wrapProps={{ onTouchStart: this.onWrapTouchStart }}\n        key={pic}\n      >\n        <div style={{ position:\"relative\",display:\"flex\",alignItems:\"center\",height: winHeight, overflow: 'scroll',margin:\"0 auto\" }}>\n          <img src={`${index}.PNG`} alt=\"\" style={{flex:\"auto\",width:winWidth-50,objectFit:\"cover\"}}></img>\n        </div>\n      </Modal>);\n    });\n    \n    return (\n      <div style={{position: \"absolute\",transform: \"translate(-50%,50%)\",bottom: \"50%\",left:\"50%\"}}>\n        <Grid data={picData}\n        columnNum={2}\n        square={false}\n        hasLine={false}\n        renderItem={(dataItem, index) => (\n          <div style={{ padding: 0 }} onClick={this.showModal(`pic${index}`)}>\n            <img src={dataItem.picture} style={{height:winHeight/2 - 100 }} alt=\"\" />\n          </div>\n        )}\n        itemStyle={{padding:0}}\n        // onClick={(dataItem, index)=>{\n        //   this.showModal(\"pic\"+index)();\n        // }}\n        >\n        </Grid>\n\n        {PicDetail}\n\n      </div>\n  \n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}